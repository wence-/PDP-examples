#+OPTIONS:   num:nil toc:nil
#+OPTIONS:   email:nil
#+TITLE: Parallel Design Patterns: Exercise 3
#+AUTHOR: Lawrence Mitchell

* Generic fractal set computation

In this practical, you'll extend your mandelbrot set code to carry out
computation of multiple different fractal sets.  All the scaffolding
code should be the same, the only change will be to the code used to
check if a complex number is in a given set.

To achieve this generic behaviour we will use function pointers to
generalise the =compute_set= function.

* Function pointers in C

C allows you to define a variable which points to the address of a
function.  Such a variable is (for obvious reasons) termed a /function
pointer/.  The syntax is somewhat different from normal variable
declarations, and is best described with an example.
#+begin_src c -n -r
  int fn(float a, int b) (ref:fn-start)
  {
      return (int)a + b;
  } (ref:fn-end)
  
  int main(void)
  {
      int (*fn_pointer)(float, int); (ref:def-fp)
  
      fn_pointer = &fn; (ref:assign-fp)
  
      return (*fn_pointer)(1.0, 2); (ref:call-fp)
  }
#+end_src
In lines [[(fn-start)]]-[[(fn-end)]] we define a function taking two
arguments, a =float= and an =int= and returning an =int=.  In line
[[(def-fp)]] we define a variable =fn_pointer= to hold a reference to
this function.  On line [[(assign-fp)]] we assign the address of the
defined function to the function pointer, finally on line
[[(call-fp)]] is an example of how to call a function through a
function pointer.

It can become slightly confusing to use function pointers in argument
lists to functions.  One solution is to use =typedef= to wrap the
variable declaration as demonstrated in the following example.
#+begin_src c
  typedef int (*fn_pointer)(float, int);
  
  int fn(float a, int b)
  {
      return (int)a + b;
  }
  
  int main(void)
  {
      fn_pointer fp;
  
      fp = &fn;
  
      return fn(1.0, 2);
  }
#+end_src
Now you can write a function which takes a function pointer as an
argument more easily.
#+begin_src c
  typedef int (*fn_pointer)(float, int);
  
  int fn(float a, int b)
  {
      return (int)a + b;
  }
  
  int fn_with_fp_arg(fn_pointer f, float a, int b)
  {
      return (*f)(a, b);
  }
#+end_src
Without the =typedef= this code is more complicated.
#+begin_src c
  int fn(float a, int b)
  {
      return (int)a + b;
  }
  
  int fn_with_fp_arg(int (*f)(float, int), float a, int b)
  {
      return (*f)(a, b);
  }
#+end_src
For a much more complete introduction to function pointers, including
description of the syntax for C++ as well as C, have a read of [[http://www.newty.de/fpt/index.html][The
Function Pointer Tutorial]] [fn:: www.newty.de/fpt/index.html].

* Procedure pointers in Fortran

Fortran also has a way of specifying that an argument to a function or
subroutine is a procedure, rather than a variable.  The argument to
the function should be specified as an interface block, rather than a
variable declaration.
#+begin_src f90
  real function minimum(a, b, fn)
    ! Return the minimum of fn(x) in the interval (a,b)
    real, intent(in) :: a, b
  
    interface
       real function fn(x)
         real, intent(in) :: x
       end function fn
    end interface
  
    ...
    f = fn(x)
    ...
  end function minimum
#+end_src
When invoking the function =minimum= the third argument should name a
function with an interface that matches that in the dummy argument
list.  If we want to pass the name of the function around in variable,
like C function pointers, we need to work a bit harder.  Here's a
complete example.
#+begin_src f90 -n -r
  module fnptr (ref:mod-start)
    implicit none
    abstract interface
       real function fn(x)
         real, intent(in) :: x
       end function fn
    end interface
  contains
    real function a(x)
      real, intent(in) :: x
      a = x*x
    end function a
  end module fnptr (ref:mod-end)
  
  program main
    use fnptr
    implicit none
    procedure(fn), pointer :: fp (ref:fp-def)
    fp => a
    call sub(fp, 3.0) (ref:fp-call)
    call sub(a, 2.0) (ref:direct-call)
  contains
    subroutine sub(f, x)
      procedure(fn) :: f
      real, intent(in) :: x
      write(*,*)f(x)
    end subroutine sub
  end program main
#+end_src
In this example, we define a module (lines [[(mod-start)]]-[[(mod-end)]]) that
contains an interface for a real function, note that the =abstract=
keyword only arrived in Fortran 2003.  In the main program we define a
procedure pointer that matches this interface (line [[(fp-def)]]).  We
then point the function pointer at the function =a=.  In line [[(fp-call)]]
we call a subroutine with this function pointer, in the next line we
call the function directly.  Note that compiler support for this
feature is patchy.  Things will improve in the coming years as Fortran
2003 support becomes more widespread.

* The Julia set

The additional fractal set computation you should implement is
computation of the Julia set.  Consider a rational function $f(z)$
mapping from the complex plane to itself $f : \mathbb{C} \rightarrow
\mathbb{C}$.  The Julia set is the set of complex numbers $z$ for
which the repeated application of $f(z)$ is repelling.  To draw the
set, we will only consider entire functions, specifically, we will
restrict ourselves to functions of the form $f(z) = z^2 + c$.  In this
case the Julia set is the boundary of the set of points which converge
to infinity under repeated application of the function.  Like the
Mandelbrot set, we use a heuristic to decide if a point $z$ is in the set.
1. Let $z_0 = z$
2. If $|z_0| > 2$, return 0
3. Compute $z_{n+1} = z_n^2 + c$
   1. If $|z_{n+1}| > 2$, return $n+1$
   2. If $n+1 = n_{\mathrm{max}}$, return $n+1$
   3. Else, set $n \leftarrow n+1$ and go to 3.
#+CAPTION: The Julia set for $f(z) = z^2 + 0.285 + \mathrm{i}0.01$
#+LABEL: fig:julia
#+ATTR_LaTeX: width=8cm
[[file:julia.png]]
We colour the returned iteration numbers the same as for the
Mandelbrot set (so you don't need to change the image drawing routines
at all).  Figure \ref{fig:julia} shows the Julia set for $f(z) = z^2 +
0.285 + \mathrm{i}0.01$ generated with the commandline arguments =-x
-2 -X 2 -y -1.5 -Y 1.5 -i 32=

* Debugging problems
The most likely issue you will stumble across in this exercise is that
your code for generating the set considers the image array to store
the complex plane in a different order from that expected by the image
writing routines.  The data should be ordered slightly differently
depending on whether you are in using the C or Fortran code:
** C
  - =image[0][0]= is the bottom left corner
  - =image[max_y-1][0]= is the top left corner
  - =image[max_y-1][max_x-1]= is the top right corner
  - =image[0][max_x-1]= is the bottom right corner
** Fortran
  - =image(1,1)= is the bottom left corner
  - =image(1, max_y)= is the top left corner
  - =image(max_x, max_y)= is the top right corner
  - =image(max_x, 1)= is the bottom right corner

The example Julia set shown in figure \ref{fig:julia} should pick up
on these problems because it is not symmetric about either the X or Y
axes.
