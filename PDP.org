#+TITLE: PDP - Parallel Design Patterns - Practical Exercises
#+AUTHOR: Adam Carter, Lawrence Mitchell

* TODO Testing and Bug Fixing
** TODO Practical 1 (Serial mandelbrot)
   DEADLINE: <2012-01-18 Wed>
*** DONE C
    :LOGBOOK:
    :END:
    - [X] Solution
    - [X] Template
    - [X] Test

*** TODO Fortran
    - [ ] Solution
    - [ ] Template
    - [ ] Test

*** TODO Handout
    - [X] Write instructions
    - [ ] Do dry run (does it make sense?)

** TODO Practical 2a (Serial domain decomposition)
   DEADLINE: <2012-01-25 Wed>
*** DONE C
    :LOGBOOK:
    :END:
    - [X] Solution
    - [X] Template
    - [X] Test

*** TODO Fortran
    - [ ] Solution
    - [ ] Template
    - [ ] Test

*** TODO Handout
    - [ ] Write instructions
    - [ ] Do dry run (does it make sense?)

** TODO Practical 2b (Extend serial domain decomposition to parallel MPI)
   DEADLINE: <2012-01-25 Wed>
*** DONE C
    :LOGBOOK:
    :END:
    - [X] Solution
    - [X] Template
    - [X] Test

*** TODO Fortran
    - [ ] Solution
    - [ ] Template
    - [ ] Test

*** TODO Handout
    - [ ] Write instructions
    - [ ] Do dry run (does it make sense?)

** TODO Practical 3 (Generalise practical 2b to add function pointers)
   DEADLINE: <2012-02-01 Wed>
   The idea here is that most of the scaffolding code is the same
   whether you want to compute, say, the Mandelbrot of Julia sets.
   The only different thing is the function that returns whether a
   point is in the set or not.
*** DONE C
    :LOGBOOK:
    :END:
    - [X] Solution
    - [X] Template
    - [X] Test

*** TODO Fortran
    - [ ] Solution
    - [ ] Template
    - [ ] Test

*** TODO Handout
    - [ ] Write instructions
    - [ ] Do dry run (does it make sense?)

** TODO Practical 4 (Parallel task farm)
   DEADLINE: <2012-02-08 Wed>
   Write a task-farm framework and apply it to Mandelbrot

   In this case, the program should deal with a number of tasks
   greater than the number of processors and the master should pass
   these out on demand from workers.
*** TODO C
    - [ ] Solution
    - [ ] Template
    - [ ] Test

*** TODO Fortran
    - [ ] Solution
    - [ ] Template
    - [ ] Test

*** TODO Handout
    - [ ] Write instructions
    - [ ] Do dry run (does it make sense?)

** TODO Practical 5 (Fork/Join)
   DEADLINE: <2012-02-15 Wed>
   Write a fork-join framework and apply it to Mandelbrot

   The program should start, and note the size of the problem. If
   there are cores available, and the problem is sufficiently large
   (for some basic definition of sufficiently) it should split the
   problem in two and fork.
*** TODO Decide on implementation strategy
    The perhaps natural thing to do is to use pthreads.  In this case
    we probably won't have a Fortran version because there's no native
    wrapper for the the pthread library.  Everyone can read C anyway,
    right?
*** TODO C
    - [ ] Solution
    - [ ] Template
    - [ ] Test

*** TODO Fortran
    - [ ] Solution
    - [ ] Template
    - [ ] Test

*** TODO Handout
    - [ ] Write instructions
    - [ ] Do dry run (does it make sense?)

** TODO Other Practicals?
   DEADLINE: <2012-02-29 Wed>

   If time allows, work with Mark P on a practical for MapReduce (or
   for actors or dataflow)
